/******************************************************************
 * This is the main file for the Software Sessions
 *
 */

#include <stdint.h>
#include <inttypes.h>

#include "common.h"
#include "mp_arith.h"
#include "montgomery.h"
#include "asm_func.h"

void print_arr(uint32_t* arr, uint32_t size) {
	int32_t i;
	for(i=size-1;i>=0;i--) {
		xil_printf("%08x", arr[i]);
	}
}

int main()
{
    init_platform();
    init_performance_counters(1);

    xil_printf("Begin\n\r");

    uint32_t a[32] = {0xf484e847, 0x4ae251f1, 0xedfa617d, 0x58ab6bf4, 0x46bf4848, 0xf67c1061, 0x8811c17a, 0x578fde16, 0x493ee595, 0x1eafc4c3, 0xc4f11a2e, 0x8cb6fba7, 0x724c03a4, 0x2e6c1dbd, 0x57ebc43d, 0x3e6ee260, 0x4089c050, 0xf0384e03, 0x7357f72c, 0x87acb658, 0x7ea2490e, 0x61069112, 0x42e3f8b9, 0x9e778cef, 0x5cdf77c7, 0x10bce41c, 0x1121beec, 0x3db59a36, 0xc34620c5, 0xc6b030ae, 0xe8fc5934, 0x63a0a0cb};

    //uint32_t b[32] = {0xf484e847, 0x4ae251f1, 0xedfa617d, 0x58ab6bf4, 0x46bf4848, 0xf67c1061, 0x8811c17a, 0x578fde16, 0x493ee595, 0x1eafc4c3, 0xc4f11a2e, 0x8cb6fba7, 0x724c03a4, 0x2e6c1dbd, 0x57ebc43d, 0x3e6ee260, 0x4089c050, 0xf0384e03, 0x7357f72c, 0x87acb658, 0x7ea2490e, 0x61069112, 0x42e3f8b9, 0x9e778cef, 0x5cdf77c7, 0x10bce41c, 0x1121beec, 0x3db59a36, 0xc34620c5, 0xc6b030ae, 0xe8fc5934, 0x63a0a0cb};
    uint32_t b[32] = {0xfeb1b9f4, 0xe91d3bec, 0xfb09354d, 0x07f21d6d, 0x9ece9e1b, 0x18def18b, 0x4119e1e9, 0x55c85f24, 0x60ef0e23, 0x10e8ab54, 0x1e95cdcc, 0x4373912f, 0x6f42204d, 0x7126650d, 0xb61c1c8d, 0x98af9011, 0xa42c03b4, 0xd29e0870, 0x7923cb60, 0xdf87cfe5, 0xde4fffa0, 0x3ce537ca, 0x201040c6, 0x6e54b058, 0x814c53dc, 0xf16243f0, 0x57decf64, 0x8d0d4f37, 0x9b6d93e5, 0x45396d71, 0x615213c4, 0x65f89f9f};
    uint32_t N[32] = {0x4aeeb107, 0x5d78aa98, 0x6c55dd05, 0x6f5326c9, 0xf93f738c, 0xc10fa093, 0x20478120, 0x099d6d70, 0x833d9b82, 0x1248f3ed, 0xa43ed737, 0xc1c1da45, 0x9f23e5c7, 0xb17c3598, 0xe8938df6, 0x7ae59036, 0x9f84d87b, 0xc8710dc6, 0x249ee0f8, 0x46eeae2f, 0x66a3bb9b, 0xfeef4c6b, 0xc7b55eae, 0x7951dd0c, 0x0b4391e8, 0x141ad586, 0x1a568588, 0x908293dd, 0x472c0bea, 0x8d00abfe, 0xed17377f, 0x83a01efe};
    // a + b: 0xc999406b4a4e6cf90be99e205eb3b4aacac2e96d69008e51021f280cde2bcba40ccc3d4762f4397f9debc8dd5cf248af6734863dec7bc28dc2d65673e4b5c404d71e72720e07e0ca9f9282cae18e23f1d02a8cd6e386e7fa2f987017aa2df3b8ad583d3ac92ba3640f5b01ece58de663609d8962e90396cb33ff8ddef336a23b
    // a - b: 0xfda8012c87aa45708176c33d27d88cdfb0a84afeb942ef871f5aa02bdb9323eb3022dc9722d3b7f324215947a052496da824e672fa342bcc1d9a45929c5dbc9ba5bf524ea1cfa7afbd45b8b00309e35749436a78a65b4c620dc7196ee84fd77201c77ef246f7df91dd9d1ed5a7f0aa2d50b94e86f2f12c2f61c51604f5d32e53
    // a + b mod N = 0x45f9216c5d3735797ee8f2221787a8c03a4055904eaa08c8ee045286d2e839bb937a603a9b3edad09efc7c71f64e8d142045d80ec7dce194fa6548ad4530eb895c38e23b257452d3ee164d32426a3e2a0e68b2913f4810c31d4f7c2a26f05836a3bacfcaa8e422434e4b6158ec4e72d6f14a62997cadb9c5d686e346a847f134
    // a - b mod N = 0x8148202b74c17cf00e776f3b6f0498ca412adedbd399750f337575b1e6d6b5d3a974b9a3ea8916a22310a5b306f60508ef1394a21ed30cc4e60b53593be2951720a4e2858a6335a66ec1ee48a22dc91f0b0544be4a9a239920100d5c6b8d72f40b64ec62673f60b29eacbf69a1301db9c00c75505f470934bf3dc09d40c1df5a

    uint32_t size = 32;
    uint32_t add_result[size + 1];
    uint32_t result[size];

	il_printf("a + b:\r\n");
START_TIMING
		// 1640 cycles
		mp_add(a, b, add_result, size);
STOP_TIMING
	print_arr(add_result, size + 1);
	xil_printf("\r\n\r\n");

	xil_printf("a - b:\r\n");
START_TIMING
		// 1484 cycles
		mp_sub(a, b, result, size);
STOP_TIMING
		print_arr(result, size);

	xil_printf("a + b mod N:\r\n");
START_TIMING
		// 3209 cycles
		//mod_add(a, b, N, result, size);
STOP_TIMING
		print_arr(result, size);

	xil_printf("a - b mod N:\r\n");
START_TIMING
		mod_sub(a, b, N, result, size);
STOP_TIMING
		print_arr(result, size);

	xil_printf("End\n\r");

    cleanup_platform();

    return 0;
}
