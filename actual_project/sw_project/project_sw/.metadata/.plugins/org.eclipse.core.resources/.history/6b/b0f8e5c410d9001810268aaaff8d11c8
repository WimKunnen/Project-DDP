#include <stdint.h>
#include "common.h"
#include "asm_montgomery.h"
#include "montgomery.h"

// a and b of length SIZE and t of length 2*SIZE
void multiply_reference(uint32_t* a, uint32_t* b, uint32_t* t, uint32_t SIZE) {
	uint32_t i;
	uint32_t j;
	for(i=0;i<2*SIZE+1;i++){
		t[i] = 0;
	}
	for(i=0; i<SIZE; i++)
	{
		uint32_t c = 0;
		for(j=0;j<SIZE;j++){
			uint64_t sum = (uint64_t)t[i+j] + (uint64_t)a[j] * (uint64_t)b[i] + (uint64_t)c;
			uint32_t s = (uint32_t)sum;
			c = (uint32_t)(sum >> 32);
			t[i+j] = s;
		}
		t[i+SIZE] = c;
	}
}

void print_arr(uint32_t* arr, uint32_t size) {
	int32_t i;
	xil_printf("0x");
	for(i=size-1;i>=0;i--) {
		xil_printf("%08x", arr[i]);
	}
	xil_printf("\r\n\r\n");
}

int compare(uint32_t* cmp, uint32_t* expected, uint32_t size) {
	uint32_t i;
	for(i=0; i<size; i++) {
		if(cmp[i] != expected[i]) {
			xil_printf("Exp: ");
			print_arr(expected, size);
			xil_printf("Got: ");
			print_arr(cmp, size);
			return 1;
		}
	}
	return 0;
}

int test_montgomery() {
	uint32_t result[32];
	//Montgomery test 1:
	{
		// expected: 0x65a0397e62a35770f74d4710f48624616726b8ed0e2735f47deec3cdcb17a1043b6ec2575aa490d4babfb22ce0a9c7ce0a5c4bf4153aacb65c4cc3a99ae0c37b29753f17d504a58581d4714c6bc893474d1c12aa55cfb322e78b03b698f88c7755d17774803996e0bc4e5bd183481c72461cd34d9c234b140b90c4feb7e3ef3
		uint32_t expected[32] = {0xeb7e3ef3, 0x40b90c4f, 0xd9c234b1, 0x2461cd34, 0x183481c7, 0x0bc4e5bd, 0x4803996e, 0x755d1777, 0x698f88c7, 0x2e78b03b, 0xa55cfb32, 0x74d1c12a, 0xc6bc8934, 0x581d4714, 0x7d504a58, 0xb29753f1, 0x99ae0c37, 0x65c4cc3a, 0x4153aacb, 0xe0a5c4bf, 0xce0a9c7c, 0x4babfb22, 0x75aa490d, 0x43b6ec25, 0xdcb17a10, 0x47deec3c, 0xd0e2735f, 0x16726b8e, 0x0f486246, 0x0f74d471, 0xe62a3577, 0x65a0397};
		uint32_t a[32] = {0xf484e847, 0x4ae251f1, 0xedfa617d, 0x58ab6bf4, 0x46bf4848, 0xf67c1061, 0x8811c17a, 0x578fde16, 0x493ee595, 0x1eafc4c3, 0xc4f11a2e, 0x8cb6fba7, 0x724c03a4, 0x2e6c1dbd, 0x57ebc43d, 0x3e6ee260, 0x4089c050, 0xf0384e03, 0x7357f72c, 0x87acb658, 0x7ea2490e, 0x61069112, 0x42e3f8b9, 0x9e778cef, 0x5cdf77c7, 0x10bce41c, 0x1121beec, 0x3db59a36, 0xc34620c5, 0xc6b030ae, 0xe8fc5934, 0x63a0a0cb};
		uint32_t b[32] = {0xfeb1b9f4, 0xe91d3bec, 0xfb09354d, 0x07f21d6d, 0x9ece9e1b, 0x18def18b, 0x4119e1e9, 0x55c85f24, 0x60ef0e23, 0x10e8ab54, 0x1e95cdcc, 0x4373912f, 0x6f42204d, 0x7126650d, 0xb61c1c8d, 0x98af9011, 0xa42c03b4, 0xd29e0870, 0x7923cb60, 0xdf87cfe5, 0xde4fffa0, 0x3ce537ca, 0x201040c6, 0x6e54b058, 0x814c53dc, 0xf16243f0, 0x57decf64, 0x8d0d4f37, 0x9b6d93e5, 0x45396d71, 0x615213c4, 0x65f89f9f};
		uint32_t N[32] = {0x4aeeb107, 0x5d78aa98, 0x6c55dd05, 0x6f5326c9, 0xf93f738c, 0xc10fa093, 0x20478120, 0x099d6d70, 0x833d9b82, 0x1248f3ed, 0xa43ed737, 0xc1c1da45, 0x9f23e5c7, 0xb17c3598, 0xe8938df6, 0x7ae59036, 0x9f84d87b, 0xc8710dc6, 0x249ee0f8, 0x46eeae2f, 0x66a3bb9b, 0xfeef4c6b, 0xc7b55eae, 0x7951dd0c, 0x0b4391e8, 0x141ad586, 0x1a568588, 0x908293dd, 0x472c0bea, 0x8d00abfe, 0xed17377f, 0x83a01efe};
		uint32_t n_prime[32] = {0xe7d41349, 0x0c828dcd, 0x2dc06d90, 0x318f87bf, 0x1992ba09, 0x4b1bef10, 0x011ba664, 0xe3a7d9cf, 0x44449fbd, 0x89714d34, 0x6cd49cc4, 0x49c5b99d, 0xf90435b1, 0x38f037b7, 0xba9720db, 0x9641b106, 0xbca01d2a, 0xfdb82893, 0xbd7ce9c7, 0x372823e1, 0x4901cdde, 0xaa28d457, 0xe9f78c94, 0xb6e1e5b3, 0x5a79f7a6, 0xf5212a83, 0x2b1aab45, 0xa3924b69, 0x3c63a8af, 0x12fa121d, 0x7500bea0, 0xe58878e7};
		mont(a, b, N, n_prime, result, 32);
		compare(result, expected, 32);
	}
	
//
//	Montgomery test 1:
//	uint32_t expected[32] = {0xeb7e3ef3, 0x40b90c4f, 0xd9c234b1, 0x2461cd34, 0x183481c7, 0x0bc4e5bd, 0x4803996e, 0x755d1777, 0x698f88c7, 0x2e78b03b, 0xa55cfb32, 0x74d1c12a, 0xc6bc8934, 0x581d4714, 0x7d504a58, 0xb29753f1, 0x99ae0c37, 0x65c4cc3a, 0x4153aacb, 0xe0a5c4bf, 0xce0a9c7c, 0x4babfb22, 0x75aa490d, 0x43b6ec25, 0xdcb17a10, 0x47deec3c, 0xd0e2735f, 0x16726b8e, 0x0f486246, 0x0f74d471, 0xe62a3577, 0x65a0397};
//	Montgomery test 2:
//	uint32_t expected[32] = {0xe4a627f2, 0x44ced61c, 0xb41445b2, 0x1deec41a, 0x00ec59c6, 0x366243e9, 0x8b3a5383, 0x293a279e, 0xb57482b8, 0x28a49995, 0xd5012ddd, 0xa1427bbf, 0xa4586c9c, 0x7df6bde0, 0x923e818c, 0xe215dbb8, 0x3a62ed6c, 0xe0f76529, 0x2d2936f3, 0x54e7fa14, 0x18022409, 0x6d5160c4, 0x998fe1c4, 0x86dab2c2, 0x46eda221, 0x6f93d1e2, 0xe9e57d26, 0xfb42688f, 0x679e9aa1, 0x6b70806a, 0x85d91b9f, 0x6a7decd7};
//	Montgomery test 3:
//	uint32_t expected[32] = {0xc60b461c, 0xa0b3d297, 0x36cdf567, 0xf61ba6f0, 0x5896f601, 0xb783bb66, 0xdbbe1d00, 0x09c51ceb, 0x0e815dc5, 0xbb2b3cd5, 0x8b1bc301, 0xd1537350, 0x2d2b3ca4, 0xa523a084, 0x8af15a07, 0xba3ee24e, 0xcf37d992, 0x994fb3f4, 0x851fe6c8, 0x5f0f7503, 0x64db0e7f, 0xbf345d0b, 0x270446f9, 0x40b1b03c, 0x105282ae, 0xba1be739, 0x391d873e, 0x01e17c2a, 0x29408bfe, 0x52a7b38f, 0x6e49fd28, 0x11d7e225};

	return 0;
}

int test_asm_mul() {
	uint32_t result[8];
	uint32_t a[4] = {0x2c4f70b8, 0xacbfddee, 0x0e2b9e8a, 0xc29b1894};
	uint32_t b[4] = {0x7b02886a, 0x466bab9c, 0x93235825, 0x58a33b52};
	uint32_t expected[8] = {0xd6366c30, 0x1e1a880f, 0x0094f7ad, 0xce86f14d, 0x63a40ae9, 0x3bf760f5, 0x0f55f049, 0x4361664c};
	asm_mont_mul_loop(a, b, result, 4);

	if (compare(result, expected, 8) != 0) {
		xil_printf("First test failed.\r\n");
		return 1;
	}
	return 0;
}

void test() {
	xil_printf("Starting tests...\r\n");
	
//	if (test_asm_mul() != 0) {
//		xil_printf("Assembly multiplication tests failed.\r\n");
//	}
	test_montgomery();
}
