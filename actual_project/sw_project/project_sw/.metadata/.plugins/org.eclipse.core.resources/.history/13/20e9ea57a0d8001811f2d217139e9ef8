#include <stdint.h>
#include "common.h"

// a and b of length SIZE and t of length 2*SIZE
void multiply_reference(uint32_t* a, uint32_t* b, uint32_t* t, uint32_t SIZE) {
	uint32_t i;
	uint32_t j;
	for(i=0;i<2*SIZE+1;i++){
		t[i] = 0;
	}
	for(i=0; i<SIZE; i++)
	{
		uint32_t c = 0;
		for(j=0;j<SIZE;j++){
			uint64_t sum = (uint64_t)t[i+j] + (uint64_t)a[j] * (uint64_t)b[i] + (uint64_t)c;
			uint32_t s = (uint32_t)sum;
			c = (uint32_t)(sum >> 32);
			t[i+j] = s;
		}
		t[i+SIZE] = c;
	}
}

void print_arr(uint32_t* arr, uint32_t size) {
	int32_t i;
	xil_printf("0x");
	for(i=size-1;i>=0;i--) {
		xil_printf("%08x", arr[i]);
	}
	xil_printf("\r\n\r\n");
}

int compare(uint32_t* cmp, uint32_t* expected, uint32_t size) {
	uint32_t i;
	for(i=0; i<size; i++) {
		if(cmp[i] != expected[i]) {
			xil_printf("Exp: ");
			print_arr(expected, size);
			xil_printf("Got: ");
			print_arr(cmp, size);
			return 1;
		}
	}
	return 0;
}

int test_reference() {
	uint32_t result[8];
	uint32_t a[4] = {0x2c4f70b8, 0xacbfddee, 0x0e2b9e8a, 0xc29b1894};
	uint32_t b[4] = {0x7b02886a, 0x466bab9c, 0x93235825, 0x58a33b52};
	uint32_t expected[8] = {0xd6366c30, 0x1e1a880f, 0x0094f7ad, 0xce86f14d, 0x63a40ae9, 0x3bf760f5, 0x0f55f049, 0x4361664c};
	multiply_reference(a, b, result, 4);

	if (compare(result, expected, 8) != 0) {
		xil_printf("First test failed.\r\n");
		return 1;
	}
	
	uint32_t c[4] = {0xdc6a874b, 0xb1e51742, 0xbf9e348f, 0xee1c6af1};
	uint32_t d[4] = {0x93d69b7a, 0x81715423, 0x0e084b48, 0x203388da};
	uint32_t second_expected[8] = {0xb460e2be, 0xecc8194f, 0x89f76cce, 0xc4478f7e, 0x5e2db326, 0xfb43720f, 0x702db781, 0x1df37c51};
	multiply_reference(c, d, result, 4);

	if (compare(result, second_expected, 8) != 0) {
		xil_printf("Second test failed.\r\n");
		return 1;
	}
	
	uint32_t e[32] = {0x9c7ed955, 0xb49d8310, 0xaea39b90, 0xb2273063, 0x57dbdae7, 0x7604a82a, 0x3465156c, 0x469e3be6, 0x8fdd1cdd, 0xe48c6f3e, 0x8b043153, 0xddf6f420, 0xa78909e7, 0xa332188c, 0xc691c7bb, 0x40442c4e, 0x9320b570, 0xda722075, 0x40b4ee15, 0x76234c39, 0x55f07265, 0x567500d5, 0x4591cb64, 0xae93d8a9, 0xb2834447, 0x72699afa, 0x9fb179e5, 0x9e6e2b3b, 0x4f204fc3, 0xaf8199ef, 0xfa1a4d06, 0x822926f7};
	uint32_t f[32] = {0xab56ae0d, 0xc6d5fc7a, 0x4b285f3e, 0xa70391ae, 0xfe8dbf97, 0x96586573, 0x30ea79d8, 0xa1ef9d21, 0xb9166aa2, 0x9013f2e2, 0x1310443a, 0xf44bb7f5, 0x9b307416, 0x69f084c1, 0xea821261, 0x2cbd4d8f, 0x9d8b6821, 0x0073cfea, 0x0fef1965, 0x04c984a3, 0x0ca72a1b, 0xf849e259, 0xfa2c0a1e, 0x81fe4f79, 0xe5f1e36f, 0xef012fd7, 0x26bf3b09, 0xad3f1943, 0xe46e3a53, 0x974f4e43, 0xb7c41974, 0x4eb2ae0e};
	uint32_t third_expected[64] = {0xf3b6cf51, 0x5f4e7e80, 0xd8e573c2, 0xe8c23b2d, 0x155a149c, 0x305c0b19, 0x53b68ee3, 0x6250da87, 0x5e851c9e, 0xac6434a4, 0xaad0a569, 0x6ec74b5a, 0x3689c574, 0xa897f50f, 0x0809f266, 0x28387e98, 0x3f88976a, 0xe2509353, 0x14a25ac6, 0xf827ef93, 0x9783d083, 0x12e9ed08, 0x01f9cb95, 0x2561ea7b, 0x31e6f0a1, 0x392ff583, 0x33a12b57, 0x2859ccdc, 0xe09c659a, 0xe6b5c368, 0x4e29f665, 0xd829134c, 0x07792141, 0x5b2a88c9, 0x2ef404d0, 0xc9e4ed6a, 0x8dceb8b9, 0x6f0fe0b5, 0x58656365, 0x6afc2d07, 0xda145a64, 0xa5be1331, 0x7c940c4d, 0x44f3524c, 0x3375bd04, 0x1f9ddfe7, 0xd43622f9, 0x6008b2d9, 0x14906548, 0x65192ff2, 0xf2f585e2, 0xaa199bdf, 0x172e7679, 0x31374a85, 0xc1831427, 0x5cf1ee75, 0xba0684dc, 0x4f69c816, 0x31cc618a, 0x1c4e3f5d, 0xa211a6c5, 0x8bf10822, 0x1acbb69d, 0x280362fc};
	multiply_reference(e, f, result, 32);

	if (compare(result, third_expected, 64) != 0) {
			xil_printf("Third test failed.\r\n");
			return 1;
		}
	return 0;
}

int test_asm_mul() {
	
	return 0;
}

void test() {
	xil_printf("Starting tests...\r\n");
	if (test_reference() != 0) {
		xil_printf("Reference tests failed.\r\n");
	}
	
	if (test_asm_mul() != 0) {
		xil_printf("Assembly multiplication tests failed.\r\n");
	}
}
