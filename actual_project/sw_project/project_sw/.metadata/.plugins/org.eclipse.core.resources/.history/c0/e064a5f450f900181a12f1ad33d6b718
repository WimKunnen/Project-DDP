
#include "common.h"
#include "platform/interface.h"
#include "print_arr.h"
#include "mp_arith.h"
#include "hw_accelerator.h"
#include "sleep.h"
#include "xpseudo_asm_gcc.h"

// Custom commands
uint32_t CMD_COMPUTE = 0;
uint32_t CMD_WRITE   = 2;
uint32_t CMD_READ_X  = 1;
uint32_t CMD_READ_E  = 3;
uint32_t CMD_READ_R  = 5;
uint32_t CMD_READ_R2 = 7;
uint32_t CMD_READ_M  = 9;

uint32_t CMD_WRITE_M = 8;
uint32_t CMD_WRITE_R = 10;

void init_HW_access(void)
{
	interface_init();
}

void flip(uint32_t *exp) {
	uint32_t i;
	for(i=0;i<16;i++) {
		uint32_t temp = exp[31-i];
		exp[31-i] = exp[i];
		exp[i] = temp;
	}
	for(i=0;i<32;i++) {
		uint32_t j;
		uint32_t temp = 0;
		for(j=0;j<32;j++) {
			temp = temp | (((exp[i] >> (31 - j)) & 1) << j);
		}
		exp[i] = temp;
	}
}

void shift_arr(uint32_t *exp, uint32_t amount) {
	uint32_t bits = amount % 32;
	uint32_t words = (amount >> 5);
	uint32_t i;
	for(i=0;i<32;i++) {
		if (i+words > 31)
			exp[i] = 0;
		else
			exp[i] = exp[i+words];
	}
	for(i=0;i<bits;i++) {
		uint32_t j;
		for(j=0;j<32-words;j++) {
			exp[j] = exp[j] >> 1;
			if (j < 31)
				exp[j] = exp[j] | ((exp[j+1] & 1) << 31);
		}
	}
}

void HW_accelerator(uint32_t* key, uint32_t* message, uint32_t* r,uint32_t* r2, uint32_t* modulus, uint32_t* result, uint32_t size) {
	flip(key);
	shift_arr(key, 1024-size);
	xil_printf("Flipped key:\r\n");
	print_arr(key, 32);

//	dmb();
//	dsb();
//	isb();
	sleep(0.01);

//	xil_printf("Message:\r\n");
//	print_arr(message, 32);
//	print_array_contents(message);
	send_cmd_to_hw(CMD_READ_X);
	send_data_to_hw(message);
	while(!is_done());

	sleep(0.01);

//	xil_printf("Exponent:\r\n");
//	print_arr(key, 32);
	send_cmd_to_hw(CMD_READ_E);
	send_data_to_hw(key);
	while(!is_done());

	xil_printf("R:\r\n");
	print_arr(r, 32);
	send_cmd_to_hw(CMD_READ_R);
	send_data_to_hw(r);
	while(!is_done());

	xil_printf("R2:\r\n");
	print_arr(r2, 32);
	send_cmd_to_hw(CMD_READ_R2);
	send_data_to_hw(r2);
	while(!is_done());

	xil_printf("Modulus:\r\n");
	print_arr(modulus, 32);
	send_cmd_to_hw(CMD_READ_M);
	send_data_to_hw(modulus);
	while(!is_done());

	uint32_t command = CMD_COMPUTE;
	command = command | (size << 22);
	xil_printf("Command:\r\n%08x\r\n", command);
	send_cmd_to_hw(command);
	while(!is_done());

	send_cmd_to_hw(CMD_WRITE);
	read_data_from_hw(result);
	while(!is_done());
}

void example_HW_accelerator(void)
{
	int i;

	//// --- Create and initialize a 1024-bit src array
	//       as 32 x 32-bit words.
	//       src[ 0] is the least significant word
	//       src[31] is the most  significant word

	uint32_t src[32]={
		0x00000000, 0x00000000, 0x00000000, 0x00000000,
		0x00000000, 0x00000000, 0x00000000, 0x00000000,
		0x00000000, 0x00000000, 0x00000000, 0x00000000,
		0x00000000, 0x00000000, 0x00000000, 0x00000000,
		0x00000000, 0x00000000, 0x00000000, 0x00000000,
		0x00000000, 0x00000000, 0x00000000, 0x00000000,
		0x00000000, 0x00000000, 0x00000000, 0x00000000,
		0x89abcdef, 0x01234567, 0x00000000, 0x00000000};


	//// --- Send the read command and transfer input data to FPGA

	xil_printf("Sending read command\n\r");
START_TIMING
	send_cmd_to_hw(CMD_READ_X);
	send_data_to_hw(src);
	while(!is_done());
STOP_TIMING


	//// --- Perform the compute operation

	xil_printf("Sending compute command\n\r");
START_TIMING
	send_cmd_to_hw(CMD_COMPUTE);
	while(!is_done());
STOP_TIMING


	//// --- Clear the array

	for(i=0; i<32; i++)
		src[i] = 0;


	//// --- Send write command and transfer output data from FPGA

	xil_printf("Sending write command\n\r");

START_TIMING
	send_cmd_to_hw(CMD_WRITE);
	read_data_from_hw(src);
	while(!is_done());
STOP_TIMING


	//// --- Print the array contents

	xil_printf("Printing the output data\n\r");

	print_array_contents(src);
}
