.text

.global asm_cond_sub
.func asm_cond_sub, asm_cond_sub
.type asm_cond_sub, %function

// initial params
// r0: u
// r1: n
// r2: SIZE
asm_cond_sub:
// Store saved registers
push {r4-r12, lr}

// r3: i
// r4: b
// r7: SIZE
mov r3, #0
mov r4, #0
mov r7, r2

// Allocate t[33] on stack
// r2: t
sub sp, sp, #132
mov r2, sp

sub_loop:
	// r5: u[i]
	// r6: n[i]
	ldr r5, [r0, r3, lsl #2]
	ldr r6, [r1, r3, lsl #2]
	subs r5, r5, r4
	movcs r4, #0
	movcc r4, #1
	// r5: sub
	subs r5, r5, r6
	movcc r4, #1
	// t[i] = sub
	str r5, [r2, r3, lsl #2]
	add r3, #1
	cmp r3, r7
	blt sub_loop

// r5: u[size]
ldr r5, [r0, r3, lsl #2]
subs r5, r5, r4
str r5, [r2, r3, lsl #2]
bcc end_cond_sub

// Move result from t to u
mov r3, #0
copy_loop:
	ldr r5, [r2, r3, lsl #2]
	str r5, [r0, r3, lsl #2]
	add r3, #1
	cmp r3, r7
	ble copy_loop

end_cond_sub:
// Restore saved registers
pop {r4-r12, lr}
bx lr
.endfunc

