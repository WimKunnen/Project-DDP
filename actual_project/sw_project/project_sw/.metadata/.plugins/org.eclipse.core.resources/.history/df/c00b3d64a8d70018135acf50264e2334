.text

.global asm_mont_mul_loop
.func asm_mont_mul_loop, asm_mont_mul_loop
.type asm_mont_mul_loop, %function

// r0: a
// r1: b
// r2: t
// r3: size
// r4: i
// r5: j
// r6: c
asm_mont_mul_loop:
// Push previous registers?
push {r4-r12}
mov r4, #0
mov r5, #0
outer_loop:
	mov r6, #0
	inner_loop:
		ldr r9, [r0, r5, lsl #2]	// r9: a[j]
		ldr r9, [r0, r5, lsl #2]	// r8: b[i]

		umlal


		add r5, r5, #1
		cmp r5, r3
		blt inner_loop

	add r4, r4, #1
	cmp r4, r3
	blt outer_loop

pop{r4-r12}
bx lr
.endfunc

for(i=0; i<SIZE; i++)
	{
		uint32_t c = 0;
		for(j=0;j<SIZE;j++){
			uint64_t sum = (uint64_t)t[i+j] + (uint64_t)a[j] * (uint64_t)b[i] + (uint64_t)c;
			uint32_t s = (uint32_t)sum;
			c = (uint32_t)(sum >> 32);
			t[i+j] = s;
		}
		t[i+SIZE] = c;
	}
